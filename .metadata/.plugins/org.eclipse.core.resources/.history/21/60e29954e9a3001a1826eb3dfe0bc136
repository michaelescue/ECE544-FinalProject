/**
 * @file myapp.c
 * @author Michael Escue (michael.escue@outlook.com)
 * @brief 
 * @version 0.1
 * @date 2020-05-25
 * 
 * @copyright Copyright (c) 2020
 * 
 */

/*******************************************************************/
/*  Included Source Files    */
/*******************************************************************/

/* Kernel includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
#include "semphr.h"

/* BSP includes. */
#include "xtmrctr.h"
#include "xgpio.h"
#include "sleep.h"
#include "xwdttb.h"	// Watchdog Timer
#include "nexys4IO.h"
#include "xintc.h"
#include "xuartlite.h"

/*  Function Prototypes Includes    */
#include "finalproject.h"

/*  O/S Concurrency Mechanisms    */
/*******************************************************************/

/* Queues   */
QueueHandle_t queue_rx;

/* Semaphores   */

/* Mutexes  */

/*  Global Variables    */
/*******************************************************************/

/*  Health Checks   */
static bool  master_health_check = TRUE; // Initial health of Master is TRUE.

/* UART Buffers  */
static u8 buf_uart[BUF_LEN] = {0};   // Initialize buffer
static u32 length = 0;   // Number of bytes to read/write.

/* Return Checks    */
static BaseType_t xStatus;


/*  Device Instances    */
/*******************************************************************/

/* WDT  */
XWdtTb inst_wdt;

/*  INTC    */
XIntc inst_intc;

/* UART    */
XUartLite inst_uart0;
XUartLite inst_uart1;

/*  ISRs     */
/*******************************************************************/

/* WDT Interrupt Handler    */
static void isr_wdt(void *pvUnused)
{


	/*	Debug Exceptions	*/
	#ifdef DEBUG_NO_MASTER
        master_health_check = TRUE; // Provides an exception to the crash condition.
        #endif

    /* Check crash conditions   */
    if(master_health_check)
    {
		// No violation of health check, reset all for next update.
		master_health_check = FALSE;

		// Restart Timer to prevent reset
		XWdtTb_RestartWdt(&inst_wdt);
	}
	else
    {
		if(master_health_check == FALSE)
        {
			print("WDT:\tMaster Thread Crashed.\r\n");
		}
        else
		    XWdtTb_IntrClear(&inst_wdt);
	}

	#ifdef DEBUG_WDT_TICK
        print(" (W) \r\n");
        #endif
}

static XUartLite_Handler uart1_rx_handler(void *CallBackRef, unsigned int ByteCount)
{
    XUartLite_Recv(&inst_uart1, buf_uart, ByteCount);
    length = ByteCount;
    xQueueSendFromISR(queue_rx, buf_uart, pdFALSE); // Sent to unblock rx_task.
    portYIELD_FROM_ISR(pdFALSE);
}

/*  Main Program    */
/*******************************************************************/

/*  Main    */
int main(void)
{

    /*  Handle WDT reset    */

    /* Initialize Hardware  */
    prvSetupHardware();

    /*  Initialize O/S Concurrency Mechanisms   */
    queue_rx = xQueueCreate(1, sizeof(buf_uart));

    /* Create Master Task   */
	#ifndef DEBUG_NO_MASTER
	xTaskCreate(    task_master,
                    "MASTER",
                    2048,
                    NULL,
                    2,
                    NULL );
	#endif


    // Begin O/S Process Scheduler
	vTaskStartScheduler();

    // End Program.
    return 0;
}

/*  Tasks     */
/*******************************************************************/

/* Master Task  */
void task_master(void *p)
{
    /* Variables    */
    
	/* Create the queue */

	/* Sanity check that the queue was created. */

	/* Register Interrupt handlers	*/

    // Register WDT isr handler
    #ifndef DEBUG_NO_WDT    
        register_interrupt_handler( XPAR_MICROBLAZE_0_AXI_INTC_AXI_TIMEBASE_WDT_0_WDT_INTERRUPT_INTR,
                                    isr_wdt,
                                    NULL,
                                    "WDT");
                                    #endif
    
    // Register UART handlers
	XUartLite_SetRecvHandler(&inst_uart1, &uart1_rx_handler, NULL);
    
    /* Create & Start Threads	*/

    /* Create Master Task   */
	#ifndef DEBUG_NO_RECEIVE
	xTaskCreate(    rx_task,
                    "RX",
                    2048,
                    NULL,
                    3,
                    NULL );
	#endif

    /*  Enable Interrupts   */
	XUartLite_EnableInterrupt(&inst_uart1);


	/* Enable WDT	*/
	#ifndef DEBUG_NO_WDT
        XWdtTb_Start(&inst_wdt);
        #endif

	#ifdef DEBUG_MASTER
        print("MASTER THREAD:\tEntering While Loop\r\n");
        #endif

   	/*	Quiescent operations	*/
	for( ; ; ){

		/*	Set Health check	*/
		master_health_check = TRUE;

	}

    #ifdef DEBUG_MASTER
        print("MASTER THREAD:\tExited While Loop!!!\r\n");
        #endif
}

void rx_task(void *p)
{
    xQueueReceive(queue_rx, buf_uart, portMAX_DELAY); // Block until received from ISR.
    print("ESP32: ");
    for(int i = 0; i < length; i++)
        xil_printf("%c", buf_uart[i]);
    
}

/* Initialization Routines    */
/*******************************************************************/

/*  Top Level Hardware Routine  */
void prvSetupHardware( void )
{

	#ifdef DEBUG_MAIN
	    print("SETUP HARDWARE:\tStarting.\r\n");
	    #endif

    #ifndef DEBUG_NO_WDT
        init_wdt(); // Initialize WDT.
        if(xStatus != XST_SUCCESS) print("WDT:\tInitialization Failed.\r\n");
        #endif

    #ifndef DEBUG_NO_UART0
        init_uart(&inst_uart0, XPAR_AXI_UARTLITE_0_DEVICE_ID);
        if(xStatus != XST_SUCCESS) print("UART0:\tInitialization Failed.\r\n");
        #endif

    #ifndef DEBUG_NO_UART1
        init_uart(&inst_uart1, XPAR_AXI_UARTLITE_1_DEVICE_ID);
        if(xStatus != XST_SUCCESS) print("UART1:\tInitialization Failed.\r\n");
        #endif

	#ifdef DEBUG_MAIN
	    print("SETUP HARDWARE:\tDone.\r\n");
	    #endif

}

/* Initialize UART */
void init_uart(XUartLite *UartLite, u16 DeviceId)
{

/*
	 * Initialize the UartLite driver so that it's ready to use.
	 */
	xStatus = XUartLite_Initialize(UartLite, DeviceId);
	if (xStatus  != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Perform a self-test to ensure that the hardware was built correctly.
	 */
	xStatus  = XUartLite_SelfTest(UartLite);
	if (xStatus  != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect the UartLite to the interrupt subsystem such that interrupts can
	 * occur. This function is application specific.
	 */
	xStatus  = SetupInterruptSystem(UartLite);
	if (xStatus != XST_SUCCESS) {
		return XST_FAILURE;
	}

}

/* Initialzie WDT   */
void init_wdt(void){

    /*  Configuration Structure for WDT  */
    XWdtTb_Config * wdtConfig;

	#ifdef DEBUG_WDT_INIT
	print("WDT:\tInitializing.\r\n");
	#endif

	/*
	 * Initialize the WDTTB driver so that it's ready to use look up
	 * configuration in the config table, then initialize it.
	 */
	wdtConfig = XWdtTb_LookupConfig(XPAR_WDTTB_0_DEVICE_ID);
	if (NULL == wdtConfig) {
		return XST_FAILURE;
	}

	/*
	 * Initialize the watchdog timer and timebase driver so that
	 * it is ready to use.
	 */
	xStatus = XWdtTb_CfgInitialize(&inst_wdt, wdtConfig,
			wdtConfig->BaseAddr);
	if (xStatus != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Perform a self-test to ensure that the hardware was built correctly.
	 */
	xStatus = XWdtTb_SelfTest(&inst_wdt);
	if (xStatus != XST_SUCCESS) {
		print("WDT:\tSelf test failed.\r\n");
		return XST_FAILURE;
	}

	/*
	 * Stop the timer.
	 */
	XWdtTb_Stop(&inst_wdt);

	#ifdef DEBUG_WDT_INIT
	print("WDT:\tStopped (Hardware Config).\r\n");
	#endif

}

/* ISR Registration Routine    */
/*******************************************************************/

/*  Register Interrupt Routine  */
void register_interrupt_handler(uint8_t ucInterruptID, XInterruptHandler pxHandler, void *pvCallBackRef, char name[]){

	#ifdef DEBUG_ISR_REGISTRATION
		xil_printf("ISR REGISTRATION:\t%s ISR Registration Start.\r\n", name);
        #endif

	/* Install the handler defined in this task for the button input.
	*NOTE* The FreeRTOS defined xPortInstallInterruptHandler() API function
	must be used for this purpose. */

	xStatus = xPortInstallInterruptHandler( ucInterruptID, pxHandler, pvCallBackRef );


	if( xStatus == pdPASS )
	{

		/* Enable the button input interrupts in the interrupt controller.
		*NOTE* The vPortEnableInterrupt() API function must be used for this
		purpose. */

		vPortEnableInterrupt( ucInterruptID );

		#ifdef DEBUG_ISR_REGISTRATION
            xil_printf("ISR REGISTRATION:\t%s ISR Registration done.\r\n", name);
            #endif
	}

	configASSERT( ( xStatus == pdPASS ) );

	#ifdef DEBUG_ISR_REGISTRATION
		xil_printf("ISR REGISTRATION:\t%s Assertion Passed.\r\n", name);
        #endif
}

int SetupInterruptSystem(XUartLite *UartLitePtr)
{

	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 */
	xStatus = XIntc_Initialize(&inst_intc, XPAR_INTC_0_DEVICE_ID);
	if (xStatus != XST_SUCCESS) {
		return XST_FAILURE;
	}


	/*
	 * Connect a device driver handler that will be called when an interrupt
	 * for the device occurs, the device driver handler performs the
	 * specific interrupt processing for the device.
	 */
	xStatus = XIntc_Connect(&inst_intc, XPAR_INTC_0_UARTLITE_1_VEC_ID,
			   (XInterruptHandler)XUartLite_InterruptHandler,
			   (void *)UartLitePtr);
	if (xStatus != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Start the interrupt controller such that interrupts are enabled for
	 * all devices that cause interrupts, specific real mode so that
	 * the UartLite can cause interrupts through the interrupt controller.
	 */
	xStatus = XIntc_Start(&inst_intc, XIN_REAL_MODE);
	if (xStatus != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Enable the interrupt for the UartLite device.
	 */
	XIntc_Enable(&inst_intc, XPAR_INTC_0_UARTLITE_1_VEC_ID);

	/*
	 * Initialize the exception table.
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			 (Xil_ExceptionHandler)XIntc_InterruptHandler,
			 &inst_intc);

	/*
	 * Enable exceptions.
	 */
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}